name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# Otherwise, comment out the line below. 
pool: vm-linux-build

variables:
  python.version: '3.7.17'
  azureServiceConnectionId: 'f8402e1f-66ba-4b7c-9170-d4dc84bb8b95'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'trident-test-env'
  vmBuildName: 'vm-linux-build'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'rg-udacity-shared'
        backendAzureRmStorageAccountName: 'stinfraudacity'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'test.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # "ArchiveFiles@2" picks up the web package and archives it.
    # Selenium (UI) Test Suite - Archive the package  
    - task: ArchiveFiles@2
      displayName: 'Archive Selinum UI Tests package'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        replaceExistingArchive: true
    # Selenium Test Suite - Publish the package  
    - task: PublishPipelineArtifact@1
      displayName: "Upload Selenium package"
      inputs:
        targetPath: "$(Build.BuildId)-selenium.zip"
        artifact: "trident-selenium"

    #--------------------------------------------#    
    # FakeRestAPI - Archive the package  
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI package`'
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    
    - task: PublishPipelineArtifact@1
      displayName: "Upload Fake RestAPI"
      inputs:
        targetPath: "$(Build.BuildId)-fakerestapi.zip"
        artifact: "trident-fakerestapi"

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: DeployWebApp

  jobs:
  - deployment: FakeRestAPI
  
    pool:
      name: 'Ubuntu-18.04'      
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'automated-testing-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/trident-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact. 

- stage: Testing
  dependsOn: DeployWebApp
  condition: succeeded()
  jobs:
    - job: TestPostman
      pool:
        name: '$(vmBuildName)'
      steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '16.x'
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'npm install newman -g'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      # Postman Data Validation Test Suite
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run ValidationTest.postman_collection.json -e trident-env.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman Regression Test Suite
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run RegressionTest.postman_collection.json -e trident-env.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman - Publish Results 
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          mergeTestResults: true
          testRunTitle: 'ReportTestWithPostman'
    - job: JMeterTest
      displayName: Performance testing by JMeter
      pool:
        name: '$(vmBuildName)'
      steps:
        - script: |
            wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.2.tgz
            tar -xzvf apache-jmeter-5.6.2.tgz
          workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
          displayName: "Install JMeter"
        - script: |
            mkdir -p html-report/stress-test
            apache-jmeter-5.6.2/bin/jmeter -n -t Trident-StressTest.jmx -l simple-result-stress-test.csv -e -o html-report/stress-test
          workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
          displayName: "Execute JMeter Test Stress Test"

        - script: |
            mkdir -p html-report/endurance-test
            apache-jmeter-5.6.2/bin/jmeter -n -t Trident-EnduranceTest.jmx -l simple-result-endurance-test.csv -e -o html-report/endurance-test
          workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
          displayName: "Execute JMeter Test Endurance Test"

        - task: ArchiveFiles@2
          displayName: "Archive PerformanceTestSuite"
          inputs:
            rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite/html-report"
            includeRootFolder: false
            archiveType: "zip"
            archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
        # JMeter Test Suite - Publish
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
          displayName: "Upload Performance Test Result"
          artifact: trident-perftests
    - deployment: TestOnVM
      dependsOn: JMeterTest
      condition: succeeded()
      displayName: UI Testing By Selenium
      environment:
        name: '$(environmentName)'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Bash@3
                inputs:
                  targetType: inline
                  script: |
                    #!/bin/bash
                    sudo add-apt-repository universe
                    sudo apt-get update
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo snap remove chromium
                    sudo apt-get install -y chromium-browser
                    pip3 install selenium

                    # download chrome driver
                    FILE=chromedriver_linux64.zip
                    if [ -f "$FILE" ]; then
                      echo "$FILE exists."
                    else
                      wget https://chromedriver.storage.googleapis.com/112.0.5615.28/chromedriver_linux64.zip
                    fi
                    echo "Place"
                    pwd
                    echo "list out"
                    ls
                    # install chrome driver
                    unzip -o chromedriver_linux64.zip
                    sudo mkdir -p /usr/bin/chromedriver
                    sudo mv chromedriver /usr/bin/chromedriver
                    sudo chown root:root /usr/bin/chromedriver
                    sudo chmod +x /usr/bin/chromedriver
                    export PATH=$PATH:/usr/bin/chromedriver
                    chromium-browser -version
                    echo "chrome driver"
                    chromedriver --version

                    cd $(Pipeline.Workspace)/trident-selenium
                    unzip -o $(Build.BuildId)-selenium.zip
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    python3 login.py > ui-logs.log
                    python3 login.py
                    sudo mv ui-logs.log /var/log/selenium
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    sudo cp /var/log/selenium/ui-logs.log log/selenium
                displayName: "Execute UI Test Suite"
              # JMeter Test Suite - Publish
              - task: PublishPipelineArtifact@1
                displayName: 'Upload Selenium Result'
                inputs:
                  targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                  artifact: 'trident-selenium-report'